// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/quotes.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuotesClient is the client API for Quotes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotesClient interface {
	ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (*ListQuotesReply, error)
	AddQuote(ctx context.Context, in *QuoteData, opts ...grpc.CallOption) (*AddQuoteReply, error)
}

type quotesClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotesClient(cc grpc.ClientConnInterface) QuotesClient {
	return &quotesClient{cc}
}

func (c *quotesClient) ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (*ListQuotesReply, error) {
	out := new(ListQuotesReply)
	err := c.cc.Invoke(ctx, "/quotes.Quotes/ListQuotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotesClient) AddQuote(ctx context.Context, in *QuoteData, opts ...grpc.CallOption) (*AddQuoteReply, error) {
	out := new(AddQuoteReply)
	err := c.cc.Invoke(ctx, "/quotes.Quotes/AddQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotesServer is the server API for Quotes service.
// All implementations must embed UnimplementedQuotesServer
// for forward compatibility
type QuotesServer interface {
	ListQuotes(context.Context, *ListQuotesRequest) (*ListQuotesReply, error)
	AddQuote(context.Context, *QuoteData) (*AddQuoteReply, error)
	mustEmbedUnimplementedQuotesServer()
}

// UnimplementedQuotesServer must be embedded to have forward compatible implementations.
type UnimplementedQuotesServer struct {
}

func (UnimplementedQuotesServer) ListQuotes(context.Context, *ListQuotesRequest) (*ListQuotesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuotes not implemented")
}
func (UnimplementedQuotesServer) AddQuote(context.Context, *QuoteData) (*AddQuoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuote not implemented")
}
func (UnimplementedQuotesServer) mustEmbedUnimplementedQuotesServer() {}

// UnsafeQuotesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotesServer will
// result in compilation errors.
type UnsafeQuotesServer interface {
	mustEmbedUnimplementedQuotesServer()
}

func RegisterQuotesServer(s grpc.ServiceRegistrar, srv QuotesServer) {
	s.RegisterService(&Quotes_ServiceDesc, srv)
}

func _Quotes_ListQuotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServer).ListQuotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.Quotes/ListQuotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServer).ListQuotes(ctx, req.(*ListQuotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quotes_AddQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServer).AddQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quotes.Quotes/AddQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServer).AddQuote(ctx, req.(*QuoteData))
	}
	return interceptor(ctx, in, info, handler)
}

// Quotes_ServiceDesc is the grpc.ServiceDesc for Quotes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Quotes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quotes.Quotes",
	HandlerType: (*QuotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListQuotes",
			Handler:    _Quotes_ListQuotes_Handler,
		},
		{
			MethodName: "AddQuote",
			Handler:    _Quotes_AddQuote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/quotes.proto",
}
